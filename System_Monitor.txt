#!/bin/bash

# ==============================
# Server Security & Privacy Monitoring System
# ==============================
# Author: [Your Name]
# Description: This script monitors server security settings, performs log analysis, and checks for sensitive data.
# Version: 1.0
# ==============================

# Function to print colored messages
print_message() {
    local type="$1"
    local message="$2"
    case $type in
        "success")
            echo -e "\033[1;32m[SUCCESS]: $message\033[0m"
            ;;
        "warning")
            echo -e "\033[1;33m[WARNING]: $message\033[0m"
            ;;
        "error")
            echo -e "\033[1;31m[ERROR]: $message\033[0m"
            ;;
        *)
            echo -e "$message"
            ;;
    esac
}

# Placeholder function for security audit
perform_security_audit() {
    print_message "info" "Running security audit..."

    # Check for open ports using nmap
    print_message "info" "Checking open ports..."
    sudo nmap -sT -O localhost | grep 'open'

    # Check firewall status (for ufw)
    print_message "info" "Checking firewall status..."
    if sudo ufw status | grep -q "Status: active"; then
        print_message "success" "Firewall is active."
    else
        print_message "warning" "Firewall is inactive. Consider enabling it."
    fi

    # List running services and highlight unnecessary or insecure ones
    print_message "info" "Listing running services..."
    sudo systemctl list-units --type=service --state=running

    # Optional: Check for specific services that might be insecure
    print_message "info" "Checking for potentially insecure services..."
    if systemctl is-active --quiet telnet; then
        print_message "warning" "Telnet service is running. Consider disabling it for security."
    fi

    if systemctl is-active --quiet ftp; then
        print_message "warning" "FTP service is running. Consider using SFTP instead."
    fi

    print_message "success" "Security audit completed."
}

# Placeholder function for log monitoring
monitor_logs() {
    print_message "info" "Monitoring logs for suspicious activities..."
}

# Placeholder function for privacy scan
perform_privacy_scan() {
    print_message "info" "Scanning for sensitive data..."
}

# Placeholder function for system health monitoring
monitor_system_health() {
    print_message "info" "Monitoring system health and resources..."
}

# Main menu
show_menu() {
    clear
    echo "============================"
    echo "  Server Security Monitor"
    echo "============================"
    echo "1. Run Security Audit"
    echo "2. Monitor Logs"
    echo "3. Perform Privacy Scan"
    echo "4. Monitor System Health"
    echo "5. Exit"
    echo "============================"
    read -p "Choose an option [1-5]: " option
    echo "DEBUG: You chose option $option"  # Debugging line to confirm input
    case $option in
        1)
            perform_security_audit
            ;;
        2)
            monitor_logs
            ;;
        3)
            perform_privacy_scan
            ;;
        4)
            monitor_system_health
            ;;
        5)
            print_message "success" "Exiting the script."
            exit 0
            ;;
        *)
            print_message "error" "Invalid option. Try again."
            ;;
    esac

    # Force flushing the output
    sleep 1
}

# Infinite loop to keep the script running
while true; do
    show_menu
done
